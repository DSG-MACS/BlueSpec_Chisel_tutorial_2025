Copyright (c) 2017-2020 Bluespec, Inc.  All Rights Reserved.

Each program sub-directory like 'hello' and 'mergesort' contains a C
program to be compiled for "bare-metal" RISC-V (no OS) in Bluespec's
"bare-metal" configuration:
 - Memory starts at 0x_8000_0000
      (defined in lib/bare.lds)
 - Stdio is directed towards an NS16550 UART at 0x_C000_0000 with UART
      registers having an 8-byte address stride.
      (defined in lib/ns16550.h)
 - 'mergesort' has a hardware accelerator at 0x_C000_0100
      (defined in mergesort/mergesort.c)
 
In the hello/ and mergesort/ directories we have pre-compiled ELF
files and Mem.hex files, so you can use them directly for a demo,
without having to recompile anything.

The rest of this README describes how those ELF and Mem.hex files were
created, in case you want to re-create them, or if you want to compile
a different C program into ELF and Mem.hex files.

>================================================================
Prerequisite: RISC-V GNU Toolchain (gcc and friends)

You must have a RISC-V toolchain installed and on on your PATH.
Example:

    export RISCV=$HOME/git_clones/RISCV_Gnu_Toolchain/riscv64
    export PATH=$RISCV/bin:$PATH

    $ which riscv64-unknown-elf-gcc
    /home/nikhil/git_clones/RISCV_Gnu_Toolchain/riscv64/bin/riscv64-unknown-elf-gcc

The RISC-V Toolchain can be downloaded and built by starting with this step:

    $ git clone --recursive https://github.com/riscv/riscv-gnu-toolchain

and following its README directions.

Note, when you run .configure in the toolchain repo directory, you
should use the 'medany' option.  Example:

    $ ./configure --prefix=$RISCV --with-arch=rv32ima  --with-cmodel=medany

>================================================================
Compiling C programs into RISC-V ELF files for each test.

The following 'make' calls invoke the RISC-V cross compiler (gcc) in
each test sub-directory to create the corresponding ELF file.  It will
also produce the link map (.map file) and an objdump dissasembly
(.text file).

To build tests for RV64:    $ make XLEN=64
To build tests for RV32:    $ make

The tutorials' Mergesort example is built for RV64,
but you may want to play with an RV32 version as well.

If you are building tests for both RV32 and RV64, please complete both steps for
one setting of XLEN before proceeding to the next

To clean all RV64 binaries from the individual test directories
make clean RV_XLEN=64

To clean all RV32 binaries from the individual test directories
make clean

>================================================================
Creating Mem.hex files from ELF files

../Resources/elf_to_hex/elf_to_hex.c is a small C program that reads
an ELF file and writes out a Mem.hex file.  Please go to that
directory and 'make' to create an elf_to_hex executable.

Then, here is how we create the Mem.hex files for our examples:

    $ cd hello
    $ ../../Resources/elf_to_hex/elf_to_hex  hello      hello_Mem.hex
    $ cd mergesort
    $ ../../Resources/elf_to_hex/elf_to_hex  mergesort  mergesort_Mem.hex

Each of these will also create an accompanying 'symbol_table.txt'
which our WindSoc simulator (containing Flute) uses to determine
certain key addresses.

>================================================================
# Creating a new RV64 test

1. Create a new 'foo_dir/' directory for your test containing your C source code file 'foo.c'

2. Add 'foo_dir' to the SUBDIRS list in the Makefile (after 'hello', 'mergesort', ...)

3. Run 'make XLEN=64' in this directory (C_programs)
    This will create the executable  foo_dir/foo

4. To create the foo_Mem.hex and symbol_table.txt files for this program:
    $ cd foo
    $ ../../Resources/elf_to_hex/elf_to_hex  foo  foo_Mem.hex

>================================================================
